1. Дан код:
var a = 1, b = 1, c, d;
c = ++a; alert(c);                   // 2  Инкремент увеличивает переменную на единицу и возвращает увеличенное значение. 1 + 1 = 2

d = b++; alert(d);                 // 1   Постфиксный инкремент так же увеличивапет переменную на единицу, но сразу возвращает первоначальное значение, поэтому в этой строке d = 1

c = (2+ ++a); alert(c);        // 5    Префиксный инкремент увеличивает переменную на 1 и прибавляем 2. 2 + (2+1) = 5

d = (2+ b++); alert(d);      // 4     Постфиксный инкремент увеличивает переменную на 1, но возвращает первоначальное значение, поэтому ответ равен 4.

alert(a);                                 // 3    К переменной а два раза применяли инкремент, то есть 2 раза увеличивали на 1, ответ = 3.

alert(b);                                 // 3   К переменной b так же два раза применяли инкремент, то есть 2 раза увеличивали на 1, в этой строке возвращается уже увеличинное значение ответ = 3.
Почему код даёт именно такие результаты?


2. Чему будет равен x в примере ниже?
var a = 2;
var x = 1 + (a *= 2);
 Ответ: x = 5    (Переменную а умножаем на 2 и прибавляем 1).



7.*Сравнить null и 0. Попробуйте объяснить результат.

null  > 0  //false     При сравнении null Преобразуется в число 0.  0 не больше 0, результат - ложь

null == 0 //false    В JS есть правило, что при нестрогом равенстве null может быть равно только undefined и ни чему другому, поэтому выражение дает ответ - ложь.

null >= 0 //true   Здесь опять null преобразуется в 0 и получается, что 0 = 0, поэтому результат - true.
  